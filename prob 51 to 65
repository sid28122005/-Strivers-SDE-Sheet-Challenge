//51

void f(int i,vector<int> &arr, int n, int k,vector<vector<int>>&v, vector<int>a){
    if(i>=n){
        if(k==0){
            v.push_back(a);
        }
        return;
    }

    a.push_back(arr[i]);
    f(i+1,arr,n,k-arr[i],v,a);
    a.pop_back();
    f(i+1,arr,n,k,v,a);

}

vector<vector<int>> findSubsetsThatSumToK(vector<int> arr, int n, int k)
{
    // Write your code here.
    vector<vector<int>>v;
    vector<int>a;
    f(0,arr,n,k,v,a);
    return v;
}

//52

#include<bits/stdc++.h>
void f(int index , int target , vector<int> &arr, vector<int> &ds, vector<vector<int>> &res){
	if(target == 0){
		res.push_back(ds);							
		return;  					
	}
	for (int i = index; i < arr.size(); i++) {
		if (i > index and arr[i] == arr[i - 1]) {
		continue; 
		}
		if (arr[i] > target) {
		break;
		}
		ds.push_back(arr[i]);

		f(i + 1, target-arr[i], arr, ds, res);
		ds.pop_back(); 
	}
}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target)
{
	// Write your code here.
	sort(arr.begin(),arr.end());
	vector<vector<int>>res;
	vector<int>ds;
	f(0,target,arr,ds,res);
	return res;
}

//53

#include <bits/stdc++.h> 

bool isPalindrome(string s, int start, int end) {
    while (start <= end) {
        if (s[start++] != s[end--])
        return false;
    }
    ret
    
    urn true;
}
void f(int idx,string &s,vector<vector<string>>&vs,vector<string>&v){
    if(idx==s.size()){
        vs.push_back(v);
        return;
    }
    for(int i=idx;i<s.size();i++){
       if(isPalindrome(s,idx,i)){
           v.push_back(s.substr(idx,i-idx+1));
           f(i+1,s,vs,v);
           v.pop_back();
       }
    }
}
vector<vector<string>> partition(string &s) 
{
    // Write your code here.
    vector<vector<string>>vs;
    vector<string>v;
    f(0,s,vs,v);
    return vs;
}

//54

#include <bits/stdc++.h> 
void f(string &s,int idx,vector<string>&v){
    if(idx==s.size()){
        v.push_back(s);
        return;
    }
    for(int i=idx;i<s.size();i++){
        swap(s[i],s[idx]);
        f(s,idx+1,v);
        swap(s[i],s[idx]);
    }
}
vector<string> findPermutations(string &s) {
    // Write your code here.
    vector<string>v;
    f(s,0,v);
    return v;
}


//55

#include <bits/stdc++.h> 
void f(string &s,int idx,vector<string>&v){
    if(idx==s.size()){
        v.push_back(s);
        return;
    }
    for(int i=idx;i<s.size();i++){
        swap(s[i],s[idx]);
        f(s,idx+1,v);
        swap(s[i],s[idx]);
    }
}
vector<string> findPermutations(string &s) {
    // Write your code here.
    vector<string>v;
    f(s,0,v);
    return v;
}


//56

bool isSafe(vector<vector<int>>&v,int x,int y,int n){
    for(int r=0;r<x;r++){
        if(v[r][y]==1) return false;
    }
    int r=x;
    int c=y;
    while(r>=0 && c>=0){
        if(v[r][c]==1) return false;
        r--;
        c--;
    }
    r=x;c=y;
    while(r>=0 && c<n){
        if(v[r][c]==1) return false;
        r--;
        c++;
    }
    return true;
}


void nqueen(vector<vector<int>>&v,int i,int n,vector<vector<int>>&ans){
    if(i==n) {
        vector<int>temp;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                temp.push_back(v[i][j]);
            }
        }
        ans.push_back(temp);
        return;
    }
    for(int col=0;col<n;col++){
      if (isSafe(v, i, col, n)) {
        v[i][col] = 1;
        nqueen(v, i + 1, n,ans);
        v[i][col] = 0;
      }
    }
}
vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector<vector<int>> v(n,vector<int>(n,0));
    vector<vector<int>> ans;
    nqueen(v,0,n,ans);
    return ans;
}


//57

bool isValid(int matrix[9][9], int row, int col, int c){
    for(int i=0;i<9;i++){
        if(matrix[i][col]==c) return false;
        if (matrix[row][i]==c) return false;
        if (matrix[ 3 * (row / 3) + i/3 ][ 3 * (col/3) + i % 3 ] == c) return false;
    }
    return true;
}

bool isItSudoku(int matrix[9][9]) {
    // Write your code here.
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            if(matrix[i][j]==0){
                for(int c=1; c<=9; c++){
                    if(isValid(matrix,i,j,c)){
                        matrix[i][j] = c;
                        if(isItSudoku(matrix))
                            return true;
                        else
                            matrix[i][j] = 0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}

//59
#include <bits/stdc++.h> 


void ratInMazeHelper(vector<vector<int>> &maze,int i,int j,vector<int> &ds,vector<vector<int>> &ans){
  int n = maze.size();
  if(i < 0 || j < 0 || i >= n || j >= n)return ;
  if(i == n-1 && j == n-1){
    ds[n*n-1] = 1;
    ans.push_back(ds);
    return ;
  }
  if(maze[i][j] == 0 || maze[i][j] == 2)return ;

  maze[i][j] = 2;
  ds[(n*i)+j] = 1;

  ratInMazeHelper(maze, i+1, j, ds, ans); 
  ratInMazeHelper(maze, i-1, j, ds, ans); 
  ratInMazeHelper(maze, i, j-1, ds, ans); 
  ratInMazeHelper(maze, i, j+1, ds, ans); 

  ds[(n*i)+j] = 0;
  maze[i][j] = 1;
}
vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
  vector<vector<int> > ans;
  vector<int> ds(n*n, 0);
  ratInMazeHelper(maze, 0, 0, ds, ans);
  return ans;
}


//60
#include <bits/stdc++.h> 

void f(int idx,string t,string &s,unordered_map<string,int> &mp,vector<string> &ans)

{

    if(idx==s.length())

    {

        ans.push_back(t);

        return;

    }

 

    string a;

    for(int i=idx;i<s.length();i++)

    {

        a+=s[i];

        if(mp.find(a)!=mp.end())

        {

            if(t.length()==0)

              f(i+1,t+a,s,mp,ans);

            else

              f(i+1,t+" "+a,s,mp,ans);

        }

    }

}

vector<string> wordBreak(string &s, vector<string> &words)

{

  // Write your code here

  unordered_map<string, int> mp;

  for (auto it : words)

    mp[it]++;

  vector<string> ans;

  string t;

  f(0, t, s, mp, ans);

  return ans;
}
 
