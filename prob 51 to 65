//51

void f(int i,vector<int> &arr, int n, int k,vector<vector<int>>&v, vector<int>a){
    if(i>=n){
        if(k==0){
            v.push_back(a);
        }
        return;
    }

    a.push_back(arr[i]);
    f(i+1,arr,n,k-arr[i],v,a);
    a.pop_back();
    f(i+1,arr,n,k,v,a);

}

vector<vector<int>> findSubsetsThatSumToK(vector<int> arr, int n, int k)
{
    // Write your code here.
    vector<vector<int>>v;
    vector<int>a;
    f(0,arr,n,k,v,a);
    return v;
}

//52

#include<bits/stdc++.h>
void f(int index , int target , vector<int> &arr, vector<int> &ds, vector<vector<int>> &res){
	if(target == 0){
		res.push_back(ds);							
		return;  					
	}
	for (int i = index; i < arr.size(); i++) {
		if (i > index and arr[i] == arr[i - 1]) {
		continue; 
		}
		if (arr[i] > target) {
		break;
		}
		ds.push_back(arr[i]);

		f(i + 1, target-arr[i], arr, ds, res);
		ds.pop_back(); 
	}
}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target)
{
	// Write your code here.
	sort(arr.begin(),arr.end());
	vector<vector<int>>res;
	vector<int>ds;
	f(0,target,arr,ds,res);
	return res;
}

//53

#include <bits/stdc++.h> 

bool isPalindrome(string s, int start, int end) {
    while (start <= end) {
        if (s[start++] != s[end--])
        return false;
    }
    ret
    
    urn true;
}
void f(int idx,string &s,vector<vector<string>>&vs,vector<string>&v){
    if(idx==s.size()){
        vs.push_back(v);
        return;
    }
    for(int i=idx;i<s.size();i++){
       if(isPalindrome(s,idx,i)){
           v.push_back(s.substr(idx,i-idx+1));
           f(i+1,s,vs,v);
           v.pop_back();
       }
    }
}
vector<vector<string>> partition(string &s) 
{
    // Write your code here.
    vector<vector<string>>vs;
    vector<string>v;
    f(0,s,vs,v);
    return vs;
}

//54

#include <bits/stdc++.h> 
void f(string &s,int idx,vector<string>&v){
    if(idx==s.size()){
        v.push_back(s);
        return;
    }
    for(int i=idx;i<s.size();i++){
        swap(s[i],s[idx]);
        f(s,idx+1,v);
        swap(s[i],s[idx]);
    }
}
vector<string> findPermutations(string &s) {
    // Write your code here.
    vector<string>v;
    f(s,0,v);
    return v;
}
