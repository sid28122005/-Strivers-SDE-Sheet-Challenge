//89-------------------------------------------------------------------->

#include<bits/stdc++.h>
vector<int> nextSmallerElement(vector<int> &arr, int n)
{
    // Write your code here.
    vector<int>v(n,-1);
    stack<int>st;
    for(int i=n-1;i>=0;i--){
        while(!st.empty()){
            if(st.top()<arr[i]){
                v[i]=st.top();
                break;
            }
            st.pop();
        }
        st.push(arr[i]);
    }
    return v;
}

//90-------------------------------------------------------------------->

#include<bits/stdc++.h>
class LRUCache {
  public:
    class node {
      public:
        int key;
      int val;
      node * next;
      node * prev;
      node(int _key, int _val) {
        key = _key;
        val = _val;
      }
    };

  node * head = new node(-1, -1);
  node * tail = new node(-1, -1);

  int cap;
  unordered_map < int, node * > m;

  LRUCache(int capacity) {
    cap = capacity;
    head -> next = tail;
    tail -> prev = head;
  }

  void addnode(node * newnode) {
    node * temp = head -> next;
    newnode -> next = temp;
    newnode -> prev = head;
    head -> next = newnode;
    temp -> prev = newnode;
  }

  void deletenode(node * delnode) {
    node * delprev = delnode -> prev;
    node * delnext = delnode -> next;
    delprev -> next = delnext;
    delnext -> prev = delprev;
  }

  int get(int key_) {
    if (m.find(key_) != m.end()) {
      node * resnode = m[key_];
      int res = resnode -> val;
      m.erase(key_);
      deletenode(resnode);
      addnode(resnode);
      m[key_] = head -> next;
      return res;
    }

    return -1;
  }

  void put(int key_, int value) {
    if (m.find(key_) != m.end()) {
      node * existingnode = m[key_];
      m.erase(key_);
      deletenode(existingnode);
    }
    if (m.size() == cap) {
      m.erase(tail -> prev -> key);
      deletenode(tail -> prev);
    }

    addnode(new node(key_, value));
    m[key_] = head -> next;
  }
};

//91-------------------------------------------------------------------->

#include <bits/stdc++.h> 
class LFUCache
{
    public:
    class node{
        public:
        int key;
        int val;
        node *next;
        node *prev;
        node(int _key,int _val){
            key = _key;
            val = _val;
        }
    };

    node *head = new node(-1,-1);
    node *tail = new node(-1,-1);
    
    int cap;
    unordered_map < int, node * >mp;

    LFUCache(int capacity)
    {
        // Write your code here.
        cap = capacity;
        head -> next = tail;
        tail -> prev = head;
    }

    void addnode(node *newnode){
        node *temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }

    void removenode(node *delnode){
        node *delprev = delnode->prev;
        node *delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }

    int get(int key_) {
        if (mp.find(key_) != mp.end()) {
        node * resnode = mp[key_];
        int res = resnode -> val;
        mp.erase(key_);
        removenode(resnode);
        addnode(resnode);
        mp[key_] = head -> next;
        return res;
        }

        return -1;
    }

    void put(int key, int value)
    {
        // Write your code here.
        if(mp.find(key)!=mp.end()){
            node* existnode = mp[key];
            mp.erase(key);
            removenode(existnode);
        }
        if(mp.size()==cap){
            mp.erase(tail->prev->key);
            removenode(tail->prev);
        }

        addnode(new node(key,value));
        mp[key]=head->next;
    }
};

//92-------------------------------------------------------------------->

 #include<bits/stdc++.h>
 int largestRectangle(vector < int > & heights) {
   // Write your code here.]
  stack<int> st;

  int max_area = 0;

  int n = heights.size();

  for(int i=0;i<=n;i++){

    while(!st.empty() && (i==n || heights[st.top()]>=heights[i])){

      int height = heights[st.top()];

      st.pop();

      int width;

      if(st.empty()) width = i;

      else width = i-st.top()-1;

      max_area = max(max_area, height*width);

    }

    st.push(i);

  }

  return max_area;
 }

 //93-------------------------------------------------------------------->

 #include <bits/stdc++.h> 
vector<int> slidingWindowMaximum(vector<int> &nums, int &k)
{
    //    Write your code here.'
    vector<int>v;
    deque<int>q;
    for(int i=0;i<k;i++){
        while(!q.empty() && nums[q.back()]<nums[i]){
            q.pop_back();
        }
        q.push_back(i);
    }
    v.push_back(nums[q.front()]);
    for(int i=k;i<nums.size();i++){
        if(q.front()==i-k){
            q.pop_front();
        }
        while(!q.empty() && nums[q.back()]<nums[i]){
            q.pop_back();
        }
        q.push_back(i);
        v.push_back(nums[q.front()]);
    }
    return v;
}

//94-------------------------------------------------------------------->

#include <bits/stdc++.h> 
// Implement class for minStack.
class minStack
{
	// Write your code here.
	stack<int>st;
	int mini;
	public:
		
		// Constructor
		minStack() 
		{ 
			// Write your code here.
		}
		
		// Function to add another element equal to num at the top of stack.
		void push(int num)
		{
			// Write your code here.
			if(st.empty()){
				mini = num;
				st.push(num);
			}
			else{
				if(mini<=num){
					st.push(num);
				}
				else{
					int prev = num;
					num = 2*num - mini;
					mini = prev;
					st.push(num);
				}
			}
		}
		
		// Function to remove the top element of the stack.
		int pop()
		{
			// Write your code here.
			if(!st.empty()){
				int t = st.top();
				if(t >= mini){
					st.pop();
					return t;
				}else{
					int prev = mini;
					mini = 2*mini - t;
					st.pop();
					return prev;
				}
			}
			return -1;
		}
		
		// Function to return the top element of stack if it is present. Otherwise return -1.
		int top()
		{
			// Write your code here.
			if(!st.empty()){
				int t = st.top();
				if(t>=mini) return t;
				else return mini;
			}
			return -1;
		}
		
		// Function to return minimum element of stack if it is present. Otherwise return -1.
		int getMin()
		{
			// Write your code here
			if(st.empty()) return -1;
			else{
				return mini;
			}
		}
};
