//66

#include <bits/stdc++.h>
using namespace std;

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int n, int m, int k) {
  if (n > m)
    return ninjaAndLadoos(row2, row1, m, n, k);

  int low = max(0, k - m), high = min(n, k); // cannot take all elements 
  while (low <= high) {
    int cut1 = (low + high) >> 1;
    int cut2 = k - cut1;

    int l1 = cut1 == 0 ? INT_MIN : row1[cut1 - 1];
    int l2 = cut2 == 0 ? INT_MIN : row2[cut2 - 1];
    int r1 = cut1 == n ? INT_MAX : row1[cut1];
    int r2 = cut2 == m ? INT_MAX : row2[cut2];

    if (l1 <= r2 and l2 <= r1)
      return max(l1, l2);
    else if (l1 > r2)
      high = cut1 - 1;
    else
      low = cut1 + 1;
  }

  return 1;
}

//67

#include <bits/stdc++.h> 
using namespace std;

bool isPossible(int n, int m, vector<int>& arr, long long int mid) {
    int dayCount = 1;
    long long int timeCount = 0;

    for (int i = 0; i < m; i++) {
        if (timeCount + arr[i] <= mid) {
            timeCount += arr[i];
        } else {
            dayCount++;
            if (dayCount > n || arr[i] > mid) {
                return false;
            } else {
                timeCount = arr[i];
            }
        }
    }
    return true;
}

long long ayushGivesNinjatest(int n, int m, vector<int> time) 
{	
	// Write your code here.
	 long long int s = 0;
    long long int sum = accumulate(time.begin(), time.end(), 0LL); // Calculate sum of time values

    long long int e = sum;
    long long int ans = -1;

    while (s <= e) {
        long long int mid = s + (e-s) / 2;
        if (isPossible(n, m, time, mid)) {
            ans = mid;
            e = mid - 1;
        } else {
            s = mid + 1;
        }
    }
    return ans;
}

//68

#include <bits/stdc++.h> 

bool isFeasible(vector<int>&positions,int n,int c,int mid){
	int pos=positions[0], ele=1;
	for(int i=0;i<n;i++){
		if(positions[i]-pos>=mid){
			pos=positions[i];
			ele++;
			if(ele==c){
				return true;
			}
		}
	}
	return false;
}
int chessTournament(vector<int> positions , int n ,  int c){
	// Write your code here
	sort(positions.begin(),positions.end());
	long long res=-1;
	long long l=0;
	long long h=positions[n-1]-positions[0];
	while(l<=h){
		long long mid = (l+h)>>1;
		if(isFeasible(positions,n,c,mid)){
			res = mid;
			l = mid+1;
		}
		else h=mid-1;
	}
	return res;
}

//69

#include <bits/stdc++.h> 

void heapify(vector<int>&heap,int n,int i){
    int maxidx = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if(l<n && heap[l]>heap[maxidx]) maxidx=l;
    if(r<n && heap[r]>heap[maxidx]) maxidx=r;
    if(maxidx!=i){
        swap(heap[i],heap[maxidx]);
        heapify(heap,maxidx);
    }
}

void heapsort(vector<int>&heap){
    int n=heap.size();
    for(int i=n/2-1; i>=0; i--){
        heapify(heap,n,i);
    }
    for(int i=n-1; i>0; i--){
        swap(heap[0],heap[i]);
        heapify(heap,i,0);
    }
}
void insert(vector<int>&heap,int x){
    heap.push_back(x);
    int idx = heap.size()-1;

}

vector<int> minHeap(int n, vector<vector<int>>& q) {
    // Write your code here.
    vector<int>heap;
    vector<int>ans;
    for(int i=0;i<q.size();i++){
        if(q[i][0]==0){
            insert(heap,q[i][1]);
        }
        else{
            ans.push_back(removetop(heap));
        }
    }
    return ans;
}

//70

#include<bits/stdc++.h>
vector<int> kthSmallLarge(vector<int> &arr, int n, int k)
{
	// Write your code here.
	sort(arr.begin(),arr.end());
	return {arr[k-1],arr[n-k]};
}

//71

#include <bits/stdc++.h> 
vector<int> kMaxSumCombination(vector<int> &a, vector<int> &b, int n, int k){
	// Write your code here.
	priority_queue<int>pqa;
	vector<int>v(k);
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			pqa.push(a[i]+b[j]);
		}
	}
	for(int i=0;i<k;i++){
		v[i] = pqa.top();
		pqa.pop();
	}
	return v;
}

//72

#include<bits/stdc++.h>

void findMedian(int *arr, int n)
{
    priority_queue<int,vector<int>,greater<int>>pqmin;
    priority_queue<int>pqmax;
    for(int i=0;i<n;i++){
        // pqmin==pqmax;
        if(pqmax.empty() || pqmax.top()>=arr[i]) pqmax.push(arr[i]);
        else pqmin.push(arr[i]);

        if(pqmax.size() > pqmin.size()+1){
            pqmin.push(pqmax.top());
            pqmax.pop();
        }

        else if(pqmax.size() < pqmin.size()){
            pqmax.push(pqmin.top());
            pqmin.pop();
        }

        if(pqmin.size() < pqmax.size()) cout<<pqmax.top()<<" ";
        else if(pqmin.size() > pqmax.size()) cout<<pqmin.top()<<" ";
        else cout<<(pqmin.top()+pqmax.top())/2<<" ";
    }  
}

//73

#include <bits/stdc++.h> 
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    // Write your code here. 
    vector<int>ans;
    priority_queue<int,vector<int>,greater<int>>p;
    for(auto i:kArrays){
        for(auto j:i){
            p.push(j);
        }
    }
    while(!p.empty()){
        ans.push_back(p.top());
        p.pop();
    }
    return ans;
}

//74

#include <bits/stdc++.h> 
vector<int> KMostFrequent(int n, int k, vector<int> &arr)
{
    // Write your code here.
    vector<int>ans;
    map<int,int>freq;
    for(int i=0;i<n;i++){
        freq[arr[i]]++;
    }
    priority_queue<pair<int,int>>pq;
    for(auto i:freq){
        pq.push({i.second,i.first});
    }
    for(int i=1;i<=k;i++){
        ans.push_back(pq.top().second);
        pq.pop();
    }
    sort(ans.begin(),ans.end());
    return ans;
}
