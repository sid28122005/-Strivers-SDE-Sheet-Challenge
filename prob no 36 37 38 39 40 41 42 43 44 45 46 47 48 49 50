//prob no 36

/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* mergetwo(Node* a,Node* b){
	Node* temp = new Node(0);
	Node* res = temp;
	
	while(a!=NULL && b!=NULL){
		if(a->data < b->data){
			temp->child = a;
			temp = temp->child;
			a = a->child;
		}
		else{
			temp->child = b;
			temp = temp->child;
			b = b->child;
		}
	}
	if(a) temp->child = a;
	else temp->child = b;

	return res->child;
	
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(head==NULL || head->next==NULL){
		return head;
	}
	Node* root = flattenLinkedList(head->next);
	head->next = NULL;
	Node* nroot = mergetwo(head,root);
	
	return nroot;
	
}


//prob no 37


/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {
     // Write your code here.
     if(head == NULL||head->next == NULL||k == 0) return head;
     int l=1;
     Node* temp=head;
     while(temp->next!=NULL){
          l++;
          temp=temp->next;
     }
     temp->next = head;
     k = k%l;
     int end = l-k;
     while(end--){
          temp = temp->next;
     }
     head = temp->next;
     temp->next = NULL;
     return head;
}

//prob no 38


#include <bits/stdc++.h>

/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    // Write your code here.

    unordered_map<LinkedListNode<int>*, LinkedListNode<int>*> map;
    LinkedListNode<int> *temp = head;

    while(temp != NULL){
        map[temp] = new LinkedListNode<int>(temp->data);
        temp = temp->next;
    }

    temp = head;
    while(temp != NULL){
        map[temp]->next = map[temp->next];
        map[temp]->random = map[temp->random];
        temp = temp->next;
    }

    return map[head];
}


//prob no 49

void subsetSumHelper(int i, vector<int> &num, vector<int> &ans, int sum){
    if(i >= num.size()){
        ans.push_back(sum);
        return;
    }
    subsetSumHelper(i+1, num, ans, sum + num[i]);
    subsetSumHelper(i+1, num, ans, sum);
}

vector<int> subsetSum(vector<int> &num){
	// Write your code here.
	vector<int> ans;
    int i = 0;
    int sum = 0;
    subsetSumHelper(i, num, ans, sum);
    sort(ans.begin(), ans.end());
    return ans;
}
