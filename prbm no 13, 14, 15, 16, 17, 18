//prob 13
bool searchMatrix(vector<vector<int>>& mat, int target) {
    int n = mat.size();
    int m = mat[0].size();
    int i=0,j=m-1;
    while(i<n && j>=0){
        if(mat[i][j]==target){
            return true;
        }
        else if(mat[i][j]>target){
            j--;
        }
        else i++;
    }
    return false;
}

//prob 14
#include <bits/stdc++.h>

int modularExponentiation(int x, int n, int m) {
	// Write your code here
	long ans = 1;
	long  xx = x;
	while(n>0){
		if(n%2!=0){
			ans = ((ans)%m * (xx)%m)%m;
		}
		xx = ((xx)%m * (xx)%m)%m;
		n = n>>1;
	}
	return (int)(ans%m);
}

//prob 15
#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	// Write your code here.
	int cnt = 0;int ele;
	for(int i=0;i<n;i++){
		if(cnt==0){
			cnt=1 ;
			ele = arr[i];
		}
		else if(arr[i]==ele){
			cnt++;
		}
		else cnt--;
	}
	int cnt1=0;
	for(int i=0;i<n;i++){
		if(ele==arr[i]) cnt1++;
	}
	if (cnt1 > (n / 2)) return ele;
    return -1;
}

//prob 16
#include <bits/stdc++.h>

vector<int> majorityElementII(vector<int> &arr)
{
    // Write your code here.
    int cnt1=0, cnt2=0;
    int el1,el2;
    int n = arr.size();
    for(int i=0;i<n;i++){
        if(cnt1==0 && arr[i]!=el2){
            cnt1=1;
            el1=arr[i];
        }
        else if(cnt2==0 && arr[i]!=el1){
            cnt2=1;
            el2=arr[i];
        }
        else if(arr[i]==el1){
            cnt1++;
        }
        else if(arr[i]==el2){
            cnt2++;
        }
        else{
            cnt1--;
            cnt2--;
        }
    }
    
    vector<int>v;

    int cn1=0,cn2=0;
    for(int i=0;i<n;i++){
        if(arr[i]==el1) cn1++;
        if(arr[i]==el2) cn2++;
    }

    int mini = int(n / 3) + 1;
    if (cn1 >= mini) v.push_back(el1);
    if (cn2 >= mini) v.push_back(el2);

    return v;

}


//prob 17
#include <bits/stdc++.h> 
int f(int i,int j,vector<vector<int>>&dp){
	if(i==0 && j==0) return 1;
	else if(i<0 || j<0) return 0;
	if(dp[i][j]!=-1) return dp[i][j];
	int right = f(i,j-1,dp);
	int up = f(i-1,j,dp);

	return dp[i][j] = right + up;
}
int uniquePaths(int m, int n) {
	// Write your code here.
	vector<vector<int>>dp(m,vector<int>(n,-1));
	return f(m-1,n-1,dp);
}

//prob 18
#include <bits/stdc++.h> 

int merge(vector<int>&arr,int low,int mid,int high){
	int cnt = 0;
	int j = mid + 1;
	for(int i=low; i<=mid; i++){
		while(j<=high && arr[i] > 2*arr[j]){
			j++;
		}
		cnt += (j-(mid+1));
	}
	vector<int>v;
	int left = low, right = mid+1;
	while(left<=mid && right<=high) {
		if(arr[left]<=arr[right]){
			v.push_back(arr[left++]);
		}
		else{
			v.push_back(arr[right++]);
		}
	}
	while(left<=mid){
		v.push_back(arr[left++]);
	}
	while(right<=high){
		v.push_back(arr[right++]);
	}
	for(int i=low;i<=high;i++){
		arr[i] = v[i-low];
	}
	return cnt;
}
int mergesort(vector<int>&arr,int low,int high){
	if(low>=high) return 0;
	int mid = (low + high) / 2;
	int inv = mergesort(arr,low,mid);
	inv += mergesort(arr,mid+1,high);
	inv += merge(arr,low,mid,high);
	return inv;
}
int reversePairs(vector<int> &arr, int n){
	// Write your code here.	
	return mergesort(arr,0,n-1);
}
